import { format } from "prettier"
import { aperture, reverse } from "ramda"
import {
  createPrinter,
  createSourceFile,
  factory,
  ListFormat,
  NodeFlags,
  ScriptKind,
  ScriptTarget,
  SyntaxKind
} from "typescript"
import * as Laravel from "./LaravelRoute"
import { PathToken } from "./LaravelRoute"

const BANNER = `
  GENERATED. DO NOT EDIT THIS FILE DIRECTLY.
  File was generated by Laravel-Router-Provider
  at ${new Date().toUTCString()}
`.trim()

function tokensToTemplateString(tokens: PathToken[]) {
  const t = reverse([...tokens])

  if (t[0][0] === "text" && t[0][1].startsWith("/")) {
    t[0][1] = t[0][1].slice(1)
  }

  if (t.length === 0) {
    return factory.createExpressionStatement(factory.createStringLiteral("/"))
  }

  if (t.length === 1 && t[0][0] === "text") {
    return factory.createExpressionStatement(factory.createNoSubstitutionTemplateLiteral(t[0][1]))
  }

  if (t.length === 1 && t[0][0] === "variable") {
    return factory.createExpressionStatement(factory.createIdentifier(t[0][3]))
  }

  let node = factory.createTemplateExpression(factory.createTemplateHead("", ""), [])

  const isText = (x: Laravel.PathToken): x is Laravel.TextToken => x[0] === "text"
  const isVariable = (x: Laravel.PathToken): x is Laravel.VariableToken => x[0] === "variable"

  aperture(2, t).forEach(([t1, t2], index, { length }) => {
    if (isText(t1) && isVariable(t2) && index === 0 && length === 1) {
      node = factory.updateTemplateExpression(node, factory.createTemplateHead(`${t1[1]}/`), [
        factory.createTemplateSpan(factory.createIdentifier(t2[3]), factory.createTemplateTail(""))
      ])
      return
    }

    if (isText(t1) && isVariable(t2) && index === 0) {
      node = factory.updateTemplateExpression(node, factory.createTemplateHead(`${t1[1]}/`), [])
      return
    }

    if (isVariable(t1) && isText(t2)) {
      node = factory.updateTemplateExpression(
        node,
        node.head,
        node.templateSpans.concat(
          factory.createTemplateSpan(
            factory.createIdentifier(t1[3]),
            length - 1 === index ? factory.createTemplateTail(t2[1]) : factory.createTemplateMiddle(t2[1])
          )
        )
      )
      return
    }

    if (isVariable(t1) && isVariable(t2) && index === length - 1) {
      node = factory.updateTemplateExpression(
        node,
        node.head,
        node.templateSpans.concat(
          factory.createTemplateSpan(factory.createIdentifier(t1[3]), factory.createTemplateMiddle(t1[1])),
          factory.createTemplateSpan(factory.createIdentifier(t2[3]), factory.createTemplateTail(""))
        )
      )
      return
    }

    if (isVariable(t1) && isVariable(t2)) {
      node = factory.updateTemplateExpression(
        node,
        node.head,
        node.templateSpans.concat(
          factory.createTemplateSpan(
            factory.createIdentifier(t1[3]),
            length - 1 === index ? factory.createTemplateTail("/") : factory.createTemplateMiddle("/")
          )
        )
      )
      return
    }
  })

  return factory.createExpressionStatement(node)
}

function toPascalCase(input: string): string {
  return input
    .split(/[^a-zA-Z0-9]+/)
    .map((item) => item.charAt(0).toUpperCase() + item.slice(1))
    .join("")
}

function toCamelCase(input: string): string {
  return input
    .split(/[^a-zA-Z0-9]+/)
    .map((item, index) => (index === 0 ? item.charAt(0) : item.charAt(0).toUpperCase()) + item.slice(1))
    .join("")
}

function readJsonFromStdin() {
  let stdin = process.stdin
  let inputChunks: Buffer[] = []

  stdin.resume()
  stdin.setEncoding("utf8")

  stdin.on("data", (chunk) => {
    inputChunks.push(chunk)
  })

  return new Promise<Laravel.Route[]>((resolve, reject) => {
    stdin.on("end", () => {
      resolve(JSON.parse(inputChunks.join()))
    })
    stdin.on("error", () => {
      reject(new Error("error during read"))
    })
    stdin.on("timeout", () => {
      reject(new Error("timout during read"))
    })
  })
}

const GetRouteName = (route: Laravel.Route) => {
  const alias = route.action.as && toPascalCase(route.action.as)

  const [controllerName, actionName] = route.action.uses.split("@")

  // Using either route custom name or controller name concatenated with action method name
  return (
    alias ||
    controllerName.slice(controllerName.lastIndexOf("\\") + 1).replace("Controller", "") +
      actionName[0].toUpperCase() +
      actionName.slice(1)
  )
}

async function main() {
  const routes: Laravel.Route[] = await readJsonFromStdin()
  const printer = createPrinter()

  const routeNodes = routes.map((route) => {
    const method = route.methods[0].toLowerCase() as "get" | "post"
    const funcName = GetRouteName(route)
    const path = tokensToTemplateString(route.symfony.path_tokens)

    const baseInput = route.input
    const pathInput = route.symfony.vars.reduce((a, b) => ({ ...a, [b]: "string" }), {})

    const inputVars = {
      ...baseInput,
      ...pathInput
    }

    const inputVarsEmpty = Object.values(inputVars).length === 0

    return factory.createPropertyAssignment(
      factory.createIdentifier(funcName),
      factory.createArrowFunction(
        undefined,
        undefined,
        inputVars && !inputVarsEmpty
          ? [
              factory.createParameterDeclaration(
                undefined,
                undefined,
                undefined,
                factory.createObjectBindingPattern(
                  Object.keys(inputVars).map((key) =>
                    factory.createBindingElement(
                      undefined,
                      undefined,
                      factory.createIdentifier(toCamelCase(key)),
                      undefined
                    )
                  )
                ),
                undefined,
                factory.createTypeLiteralNode(
                  Object.entries(inputVars).map(([key, value]) => {
                    const rules: string[] =
                      typeof value === "string" ? value.split("|") : value instanceof Array ? value : []

                    return factory.createPropertySignature(
                      undefined,
                      toCamelCase(key),
                      rules.includes("required") ? undefined : factory.createToken(SyntaxKind.QuestionToken),
                      rules.includes("integer")
                        ? factory.createKeywordTypeNode(SyntaxKind.NumberKeyword)
                        : rules.includes("date")
                        ? factory.createTypeReferenceNode(factory.createIdentifier("Date"))
                        : rules.includes("string")
                        ? factory.createKeywordTypeNode(SyntaxKind.StringKeyword)
                        : factory.createLiteralTypeNode(factory.createStringLiteral(JSON.stringify(value)))
                    )
                  })
                )
              ),

              factory.createParameterDeclaration(
                [],
                [],
                undefined,
                "options",
                factory.createToken(SyntaxKind.QuestionToken),
                factory.createTypeReferenceNode(factory.createIdentifier("Partial"), [
                  factory.createTypeReferenceNode(factory.createIdentifier("Options"), undefined)
                ])
              )
            ]
          : [
              factory.createParameterDeclaration(
                [],
                [],
                undefined,
                "options",
                factory.createToken(SyntaxKind.QuestionToken),
                factory.createTypeReferenceNode(factory.createIdentifier("Partial"), [
                  factory.createTypeReferenceNode(factory.createIdentifier("Options"), undefined)
                ])
              )
            ],
        undefined,
        factory.createToken(SyntaxKind.EqualsGreaterThanToken),
        factory.createBlock(
          [
            factory.createReturnStatement(
              factory.createCallExpression(
                factory.createPropertyAccessExpression(
                  factory.createIdentifier("client"),
                  factory.createIdentifier(route.methods[0].toLowerCase())
                ),
                undefined,
                baseInput
                  ? method === "get"
                    ? [
                        path.expression,
                        factory.createObjectLiteralExpression(
                          [
                            factory.createPropertyAssignment(
                              factory.createIdentifier("searchParams"),
                              factory.createObjectLiteralExpression(
                                Object.keys(baseInput).map((key) =>
                                  factory.createPropertyAssignment(
                                    factory.createIdentifier(key),
                                    factory.createCallExpression(factory.createIdentifier("String"), undefined, [
                                      factory.createIdentifier(toCamelCase(key))
                                    ])
                                  )
                                ),
                                true
                              )
                            ),
                            factory.createSpreadAssignment(factory.createIdentifier("options"))
                          ],
                          true
                        )
                      ]
                    : [
                        path.expression,
                        factory.createObjectLiteralExpression(
                          [
                            factory.createPropertyAssignment(
                              factory.createIdentifier("json"),
                              factory.createObjectLiteralExpression(
                                Object.keys(baseInput).map((key) =>
                                  toCamelCase(key) === key
                                    ? factory.createShorthandPropertyAssignment(
                                        factory.createIdentifier(key),
                                        undefined
                                      )
                                    : factory.createPropertyAssignment(
                                        factory.createIdentifier(key),
                                        factory.createIdentifier(toCamelCase(key))
                                      )
                                ),
                                true
                              )
                            ),
                            factory.createSpreadAssignment(factory.createIdentifier("options"))
                          ],
                          true
                        )
                      ]
                  : [path.expression, factory.createIdentifier("options")]
              )
            )
          ],
          true
        )
      )
    )
  })

  const nodes = [
    factory.createImportDeclaration(
      undefined,
      undefined,
      factory.createImportClause(
        false,
        factory.createIdentifier("ky"),
        factory.createNamedImports([
          factory.createImportSpecifier(false, undefined, factory.createIdentifier("Options"))
        ])
      ),
      factory.createStringLiteral("ky"),
      undefined
    ),

    factory.createJSDocComment(BANNER, []),

    factory.createVariableStatement(
      [factory.createModifier(SyntaxKind.ExportKeyword)],
      factory.createVariableDeclarationList(
        [
          factory.createVariableDeclaration(
            factory.createIdentifier("getRoutes"),
            undefined,
            undefined,
            factory.createArrowFunction(
              undefined,
              undefined,
              [
                factory.createParameterDeclaration(
                  undefined,
                  undefined,
                  undefined,
                  factory.createIdentifier("client"),
                  undefined,
                  factory.createTypeQueryNode(factory.createIdentifier("ky")),
                  undefined
                )
              ],
              undefined,
              factory.createToken(SyntaxKind.EqualsGreaterThanToken),
              factory.createParenthesizedExpression(factory.createObjectLiteralExpression(routeNodes, true))
            )
          )
        ],
        NodeFlags.Const
      )
    )
  ]

  const file = createSourceFile("routes.ts", "", ScriptTarget.Latest, true, ScriptKind.TS)

  const output = printer.printList(ListFormat.MultiLine, factory.createNodeArray(nodes), file)

  process.stdout.write(
    format(output, {
      parser: "typescript",
      arrowParens: "avoid",
      printWidth: 80,
      semi: false,
      singleQuote: false,
      trailingComma: "none"
    })
  )
}

main()
